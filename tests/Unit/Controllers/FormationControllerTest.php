<?php

namespace Tests\Unit\Controllers;

use App\Http\Controllers\Admin\FormationController;
use App\Http\Requests\FormationRequest;
use Tests\TestCase;
use App\Models\Category;
use App\Models\Formation;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class FormationControllerTest extends TestCase
{
    use RefreshDatabase;

    private $categories = array();
    private $categoriesIDs = array();
    private $formations;

    function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // DEFINI LE NOMBRE DE CATEGORIES & FORMATION POUR CETTE SERIE DE TEST
        $nbr_categories = 3;
        $nbr_formations = 3;

        // Création des categories
        for($i = 1; $i <= $nbr_categories; $i++) {
            array_push($this->categories, factory(Category::class)->create(['name' => 'category-' . $i]));
        }
        Category::each(function($item, $key){
            array_push($this->categoriesIDs, $item->id);
        });

        // Création des formations
        for($i = 1; $i <= $nbr_formations; $i++) {
            $categoryIDRandom = $this->categoriesIDs[array_rand($this->categoriesIDs)];
            factory(Formation::class)->create(['category_id' => Category::where('id', '=', $categoryIDRandom)->first()]);
        }
        $this->formations = Formation::all();
    }

    /**
     * Vérifie que l'action INDEX retourne bien une vue
     *
     * @return void
     */
    public function test_Admin_PostController_Index()
    {
        $this->withExceptionHandling();
        $response = $this->get(action('Admin\FormationController@index'));
        $response->assertStatus(200);
    }

    /**
     * Vérifie que l'action Create retourne bien la vue
     *
     * @return void
     */
    public function test_Admin_PostController_Create()
    {
        $response = $this->get(action('Admin\FormationController@create'));
        $response->assertStatus(200);
    }


    /**
     * Vérifie que l'action Store crée bien une formation
     *
     * @return $post
     */
    public function test_Admin_Formation_Controller_Store()
    {
        // Arrange
        $request = FormationRequest::create('/formation.store', 'POST',[
            'title' => 'titre de la formation numéro 2',
            'resume' => 'un text tres long de l\'article numéro 1',
            'slug' => 'article-2',
            'category_id' => Category::first()->id,
            'teaser_path' => 'http://balbla.fr/erererer'
        ]);
        $controller = new FormationController();

        // Act
        $response = $controller->store($request);
        $formation = Formation::where('title', 'titre de la formation numéro 2')->first();

        // Assert
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertNotNull($formation);
    }

    /**
     * Vérifie que la création d'une formation avec un titre déjà existant retourne une erreur
     *
     * @return void
     */
    public function test_Admin_PostController_Store_Error_On_Title()
    {
        // Arrange
        $controller = new FormationController();
        $request = FormationRequest::create('/formation.store', 'POST',[
            'title' => Formation::first()->title,
            'resume' => 'un text tres long de l\'article numéro 1',
            'slug' => '',
            'category_id' => Category::first()->id,
            'teaser_path' => 'https://youtube.com/fssddddsd'
        ]);

        // Act
        $response = $controller->store($request);  //  Titre déjà existant

        // Assert
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertNotEquals('success', session()->get('notification.type'));
    }

    /**
     * Vérifie que la création d'un article avec un slug déjà existant retourne une erreur
     *
     * @return void
     */
    public function test_Admin_PostController_Store_Error_On_Slug()
    {
        // Arrange
        $controller = new FormationController();
        $request = FormationRequest::create('/formation.store', 'POST',[
            'title' => 'titre de l\'article numéro 33',
            'resume' => 'un text tres long de l\'article numéro 1',
            'slug' => Formation::first()->slug,
            'category_id' => Category::first()->id,
            'teaser_path' => 'https://youtube.com/fdfksjfoizjfij'
        ]);

        // Act
        $response = $controller->store($request); // Slug déjà existant

        // Assert
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertNotEquals('success', session()->get('notification.type'));
    }

    /**
     * Vérifie que la demande d'édition d'une formation est ok
     *
     * @return void
     */
    public function test_Admin_FormationController_Edit()
    {
        // Act
        $response = $this->get(action('Admin\FormationController@edit', $this->formations->first()));

        // Assert
        $this->assertEquals(200, $response->getStatusCode());
    }


    /**
     * Vérifie que le modification d'une formation est ok
     *
     * @return void
     */
    public function test_Admin_FormationController_Update()
    {
        // Arange
        $request = FormationRequest::create('/formation.update', 'PUT',[
            'title' => 'titre de la formation numéro 2',
            'resume' => 'un text tres long de la formation numéro 2',
            'slug' => 'formation-2',
            'category_id' => Category::first()->id,
            'teaser_path' => 'https://youtube.com/dkdjfkjsf'
        ]);
        $controller = new FormationController();

        // Act
        $response = $controller->update($request, $this->formations->first());

        // Assert
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertEquals('titre de la formation numéro 2', $this->formations->first()->title);
        $this->assertEquals('un text tres long de la formation numéro 2', $this->formations->first()->resume);
        $this->assertEquals('formation-2', $this->formations->first()->slug);
        $this->assertEquals('https://youtube.com/dkdjfkjsf', $this->formations->first()->teaser_path);
    }

    /**
     * Vérifie que la suppression d'une formation est ok
     *
     * @return void
     */
    public function test_Admin_FormationController_Destroy()
    {
        $formation = Formation::first();
        $formation_id = $formation->id;

        $controller = new FormationController();
        $response = $controller->destroy($formation);

        $this->assertEquals(302, $response->getStatusCode());
        $response = Formation::where('id', $formation_id)->first();
        $this->assertEquals(null, $response);
    }
}

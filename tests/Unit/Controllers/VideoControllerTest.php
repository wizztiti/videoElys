<?php

namespace Tests\Unit;

use App\Http\Controllers\Admin\VideoController;
use App\Http\Requests\VideoRequest;
use App\Models\Video;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class VideoControllerTest extends TestCase
{
    use RefreshDatabase;

    public $video1;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->video1 = Video::create([
            'title' => 'titre de la 1ere vidéo',
            'slug' => 'titre-de-la-1ere-video',
            'description' => 'description de la 1ere vidéo',
            'duration' => 6000,
            'teaser_url' => 'https://www.youtube.com/watch?v=d4hhNL4BSvs&index=47&list=PLlxQJeQRaKDSnp4hbA3nJj_OnB0SCQLBU',
            'video_file' => 'video_01.mpg'
        ]);
    }

    /**
     * Vérifie que l'action INDEX retourne bien une vue
     *
     * @return void
     */
    public function test_Admin_VideoController_Index()
    {
        $response = $this->get(action('Admin\VideoController@index'));
        $response->assertStatus(200);
    }

    /**
     * Vérifie que l'action Create retourne bien la vue
     *
     * @return void
     */
    public function test_Admin_VideoController_Create()
    {
        $response = $this->get(action('Admin\VideoController@create'));
        $response->assertStatus(200);
    }

    /**
     * Vérifie que l'action Store crée bien une vidéo
     *
     * @return $post
     */
    public function test_Admin_VideoController_Store()
    {
        // Arrange
        $request = VideoRequest::create('/post.store', 'POST',[
            'title' => 'titre de la 1ere vidéo',
            'slug' => 'titre-de-la-1ere-video',
            'description' => 'description de la 1ere vidéo',
            'duration' => 6000,
            'teaser_url' => 'https://www.youtube.com/watch?v=d4hhNL4BSvs&index=47&list=PLlxQJeQRaKDSnp4hbA3nJj_OnB0SCQLBU',
            'video_file' => 'video_01.mpg'
        ]);
        $controller = new VideoController();

        // Act
        $response = $controller->store($request);
        $video = Video::where('title', 'titre de la 1ere vidéo')->first();

        // Assert
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertNotNull($video);
    }

    /**
     * Vérifie que la création d'une vidéo avec un titre déjà existant retourne une erreur
     *
     * @return void
     */
    public function test_Admin_PostController_Store_Error_On_Title()
    {
        // Arrange
        $request = VideoRequest::create('/post.store', 'POST',[
            'title' => 'titre de la 1ere vidéo',
            'slug' => 'titre-de-la-1ere-video',
            'description' => 'description de la 1ere vidéo',
            'duration' => 6000,
            'teaser_url' => 'https://www.youtube.com/watch?v=d4hhNL4BSvs&index=47&list=PLlxQJeQRaKDSnp4hbA3nJj_OnB0SCQLBU',
            'video_file' => 'video_01.mpg'
        ]);
        $controller = new VideoController();

        // Act
        $response = $controller->store($request);

        // Assert
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertNotEquals('success', session()->get('notification.type'));
    }

    /**
     * Vérifie que la création d'une vidéo avec un slug déjà existant retourne une erreur
     *
     * @return void
     */
    public function test_Admin_PostController_Store_Error_On_Slug()
    {
        // Arrange
        $request = VideoRequest::create('/post.store', 'POST',[
            'title' => 'titre de la vidéo',
            'slug' => 'titre-de-la-1ere-video',
            'description' => 'description de la vidéo',
            'duration' => 6000,
            'teaser_url' => 'https://www.youtube.com/watch?v=d4hhNL4BSvs&index=47&list=PLlxQJeQRaKDSnp4hbA3nJj_OnB0SCQLBU',
            'video_file' => 'video_02.mpg'
        ]);
        $controller = new VideoController();

        // Act
        $response = $controller->store($request);

        // Assert
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertNotEquals('success', session()->get('notification.type'));
    }

    /**
     * Vérifie que la demande d'édition d'une vidéo est ok
     *
     * @return void
     */
    public function test_Admin_VideoController_Edit()
    {
        // Act
        $response = $this->get(action('Admin\VideoController@edit', $this->video1));

        // Assert
        $this->assertEquals(200, $response->getStatusCode());
    }

    /**
     * Vérifie que le modification d'une vidéo est ok
     *
     * @return void
     */
    public function test_Admin_VideoController_Update()
    {
        // Arange
        $request = VideoRequest::create('/post.update', 'PUT',[
            'title' => 'titre de la vidéo',
            'slug' => 'titre-de-la-1ere-video',
            'description' => 'description de la vidéo',
            'duration' => 6000,
            'teaser_url' => 'https://www.youtube.com/watch?v=d4hhNL4BSvs&index=47&list=PLlxQJeQRaKDSnp4hbA3nJj_OnB0SCQLBU',
            'video_file' => 'video_02.mpg'
        ]);
        $controller = new VideoController();

        // Act
        $response = $controller->update($request, $this->video1);

        // Assert
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertEquals('titre de la vidéo', $this->video1->title);
        $this->assertEquals('titre-de-la-1ere-video', $this->video1->slug);
        $this->assertEquals('description de la vidéo', $this->video1->description);
        $this->assertEquals(6000, $this->video1->duration);
        $this->assertEquals('https://www.youtube.com/watch?v=d4hhNL4BSvs&index=47&list=PLlxQJeQRaKDSnp4hbA3nJj_OnB0SCQLBU', $this->video1->teaser_url);
        $this->assertEquals('video_02.mpg', $this->video1->video_file);
    }

    /**
     * Vérifie que la suppression d'une vidéo est ok
     *
     * @return void
     */
    public function test_Admin_VideoController_Destroy()
    {
        $video_id = $this->video1->id;

        $controller = new VideoController();
        $response = $controller->destroy($this->video1);

        $this->assertEquals(302, $response->getStatusCode());
        $response = Video::where('id', $video_id)->first();
        $this->assertEquals(null, $response);
    }
}

<?php

namespace Tests\Unit\Controllers;

use App\Http\Controllers\Admin\TagController;
use App\Http\Requests\TagRequest;
use App\Models\Tag;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TagControllerTest extends TestCase
{
    use RefreshDatabase;

    public $tag1;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->tag1 = Tag::create([
            'name' => 'tag1',
            'slug' => ''
        ]);
    }

    /**
     * Vérifie que l'action INDEX retourne bien une vue
     *
     * @return void
     */
    public function test_Admin_TagController_Index()
    {
        $response = $this->get(action('Admin\TagController@index'));
        $response->assertStatus(200);
    }

    /**
     * Vérifie que l'action Create retourne bien la vue
     *
     * @return void
     */
    public function test_Admin_TagController_Create()
    {
        $response = $this->get(route('admin.tag.create'));

        $response->assertStatus(200);
    }

    /**
     * Vérifie que l'action Store crée bien un tag
     *
     * @return void
     */
    public function test_Admin_TagController_Store()
    {
        $request = TagRequest::create('/tag.store', 'POST',[
            'name'     =>     'tag2',
            'slug'     =>     '',
        ]);
        $controller = new TagController();

        $response = $controller->store($request);

        $this->assertEquals(302, $response->getStatusCode());
        $category = Tag::where('name', 'tag2')->first();
        $this->assertNotNull($category);
    }

    /**
     * Vérifie que la création d'un tag déjà existante retourne une erreur
     *
     * @return void
     */
    public function test_Admin_TagController_Store_Error()
    {
        $request = TagRequest::create('/tag.store', 'POST',[
            'name' => 'tag1',
            'slug' => '',
        ]);
        $controller = new TagController();

        $response = $controller->store($request);
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertNotEquals('success', session()->get('notification.type'));
    }

    /**
     * Vérifie que la demande d'édition d'un tag est ok
     *
     * @return void
     */
    public function test_Admin_TagController_Edit()
    {
        $response = $this->get('admin/tag/'. $this->tag1->id .'/edit');

        $this->assertEquals(200, $response->getStatusCode());
    }

    /**
     * Vérifie que le modification d'un tag est ok
     *
     * @return void
     */
    public function test_Admin_TagController_Update()
    {
        $request = TagRequest::create('/tag.update', 'PUT',[
            'name'     =>     'tag2',
            'slug'     =>     '',
        ]);

        $controller = new TagController();
        $response = $controller->update($request, $this->tag1);

        $this->assertEquals(302, $response->getStatusCode());
        $this->assertEquals('tag2', $this->tag1->name);
    }

    /**
     * Vérifie que la modification d'un tag avec des données déjà existante retourne une erreur
     *
     * @return void
     */
    public function test_Admin_TagController_Update_Error()
    {
        // Arrange
        $tag = Tag::create([
            'name'     =>     'tag 2',
            'slug'     =>     '',
        ]);
        $request = TagRequest::create('/tag.update', 'PUT',[
            'name'     =>     'tag 2',
            'slug'     =>     '',
        ]);
        $controller = new TagController();

        // Act
        $response = $controller->update($request, $this->tag1);

        // Assert
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertNotEquals('success', session()->get('notification.type'));
    }

    /**
     * Vérifie que la suppression d'un tag est ok
     *
     * @return void
     */
    public function test_Admin_TagController_Destroy()
    {
        $tag_id = $this->tag1->id;
        $controller = new TagController();
        $response = $controller->destroy($this->tag1);

        $this->assertEquals(302, $response->getStatusCode());
        $this->assertEquals(null, Tag::where('id', $tag_id)->first());
        $this->assertEquals('success', session()->get('notification.type'));
    }
}

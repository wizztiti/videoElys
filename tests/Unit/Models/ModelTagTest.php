<?php

namespace Tests\Unit;

use App\Models\Category;
use App\Models\Post;
use App\Models\Tag;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ModelTagTest extends TestCase
{
    use RefreshDatabase;

    protected $posts;
    protected $tags;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // DEFINI LE NOMBRE DE TAG & DE POSTS POUR CETTE SERIE DE TESTS
        $nbr_posts = 1;
        $nbr_tags = 3;

        // Création des tags & posts
        factory(Category::class)->create();
        factory(Post::class, $nbr_posts)->create();
        $this->posts = Post::all();
        factory(Tag::class, $nbr_tags)->create();
        $this->tags = Tag::all();

        // Ajoute le 1er tag au Post
        $this->posts->first()->tags()->sync([$this->tags->first()->id]);
    }

    /**
     * @test
     *
     * @return void
     */
    public function delete_Tag()
    {
        $this->assertEquals(3, Tag::count());
        $this->tags->first()->delete();
        $this->assertEquals(2, Tag::count());
    }

    /**
     * @test
     *
     * @return void
     */
    public function test_add_tags_of_post()
    {
        $this->assertEquals(1, Post::first()->tags->count());          // test que le nbr de tags du post est bien 1
        $this->posts->first()->tags()->sync([$this->tags->first()->id, $this->tags->last()->id]);  // ajoute le dernier tag à l'article
        $this->assertEquals(2, Post::first()->tags->count());        // test que le nbr de tags du post est bien 2
    }

    /**
     * @test
     *
     * @return void
     */
    public function test_delete_tags_of_post()
    {
        $tag_a_suppr = $this->posts->first()->tags()->first();
        $this->posts->first()->tags()->detach($tag_a_suppr->id);                // Supprime 1 tag de l'article
        $this->assertEquals(0, $this->posts->first()->tags->count());  // test que le nbr de tags est bien 0
    }
}

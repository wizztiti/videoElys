<?php

namespace Tests\Unit;

use App\Models\Category;
use App\Models\Post;
use App\Models\Tag;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ModelPostSUSPENDED extends TestCase
{
    use RefreshDatabase;

    private $categories = array();
    private $categoriesIDs = array();
    private $posts;
    private $tags;

    function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // DEFINI LE NOMBRE DE CATEGORIES & POST POUR CETTE SERIE DE TEST
        $nbr_categories = 3;
        $nbr_posts = 3;

        // Création des categories
        for($i = 1; $i <= $nbr_categories; $i++) {
            array_push($this->categories, factory(Category::class)->create(['name' => 'category-' . $i]));
        }
        Category::each(function($item, $key){
            array_push($this->categoriesIDs, $item->id);
        });

        // Création des posts
        for($i = 1; $i <= $nbr_posts; $i++) {
            $categoryIDRandom = $this->categoriesIDs[array_rand($this->categoriesIDs)];
            factory(Post::class)->create(['category_id' => Category::where('id', '=', $categoryIDRandom)->first()]);
        }
        $this->posts = Post::all();
    }

    /**
     * @test
     */
    function delete_post() {
        //Test suppression d'un post
        $this->posts->first()->delete();
        $this->assertEquals(2, Post::count());
    }

    /**
     * @test
     */
    function delete_category_used() {
        // Test SUPPRESSION D'UNE CATEGORIE UTILISEE non autorisée
        try {
            $this->posts->first()->category->delete();
            $this->fail('WARNING : Category delete !!');
        } catch (\Exception $e) {
            $this->assertEquals(3 , Category::count());
        }
    }

    /**
     * @test
     */
    function delete_category_unused() {
        // Test SUPPRESSION D'UNE CATEGORIE non utilisée
        DB::table('posts')->truncate();
        Category::first()->delete();
        $this->assertEquals(2 , Category::count());
    }
}
